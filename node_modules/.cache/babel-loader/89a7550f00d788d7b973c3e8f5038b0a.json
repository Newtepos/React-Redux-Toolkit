{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst defaultProduct = {\n  item: [],\n  totalQuantity: 0\n};\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: defaultProduct,\n  reducers: {\n    replaceCartItem(state, action) {\n      const newItems = action.payload;\n      state.item = newItems;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.item.push({\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          quantity: 1,\n          totolPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totolPrice = existingItem.totolPrice + newItem.price;\n      } //UpdateItem in Cart\n\n\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find(item => item.id === newItem.id);\n\n      if (existingItem.quantity === 1) {\n        const filteredItem = state.item.filter(item => item.id !== newItem.id);\n        state.item = filteredItem;\n      } else {\n        existingItem.quantity--;\n        existingItem.totolPrice = existingItem.totolPrice - existingItem.price;\n      } //UpdateItem in Cart\n\n\n      state.totalQuantity--;\n    }\n\n  }\n});\nexport const productAction = productSlice.actions;\nexport default productSlice.reducer;","map":{"version":3,"sources":["/Users/thipsukhon/Desktop/React Udemy/Advance-redux/src/store/productSlice.js"],"names":["createSlice","defaultProduct","item","totalQuantity","productSlice","name","initialState","reducers","replaceCartItem","state","action","newItems","payload","addItemToCart","newItem","existingItem","find","id","push","price","quantity","totolPrice","removeItemFromCart","filteredItem","filter","productAction","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,EADe;AAErBC,EAAAA,aAAa,EAAE;AAFM,CAAvB;AAIA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEL,cAFiB;AAG/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC7B,YAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAxB;AACAH,MAAAA,KAAK,CAACP,IAAN,GAAaS,QAAb;AACD,KAJO;;AAMRE,IAAAA,aAAa,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMI,OAAO,GAAGJ,MAAM,CAACE,OAAvB;AACA,YAAMG,YAAY,GAAGN,KAAK,CAACP,IAAN,CAAWc,IAAX,CAAiBd,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYH,OAAO,CAACG,EAA9C,CAArB;;AAEA,UAAI,CAACF,YAAL,EAAmB;AACjBN,QAAAA,KAAK,CAACP,IAAN,CAAWgB,IAAX,CAAgB;AACdD,UAAAA,EAAE,EAAEH,OAAO,CAACG,EADE;AAEdZ,UAAAA,IAAI,EAAES,OAAO,CAACT,IAFA;AAGdc,UAAAA,KAAK,EAAEL,OAAO,CAACK,KAHD;AAIdC,UAAAA,QAAQ,EAAE,CAJI;AAKdC,UAAAA,UAAU,EAAEP,OAAO,CAACK;AALN,SAAhB;AAOD,OARD,MAQO;AACLJ,QAAAA,YAAY,CAACK,QAAb;AACAL,QAAAA,YAAY,CAACM,UAAb,GAA0BN,YAAY,CAACM,UAAb,GAA0BP,OAAO,CAACK,KAA5D;AACD,OAf0B,CAiB3B;;;AACAV,MAAAA,KAAK,CAACN,aAAN;AACD,KAzBO;;AA2BRmB,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMI,OAAO,GAAGJ,MAAM,CAACE,OAAvB;AACA,YAAMG,YAAY,GAAGN,KAAK,CAACP,IAAN,CAAWc,IAAX,CAAiBd,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYH,OAAO,CAACG,EAA9C,CAArB;;AAEA,UAAIF,YAAY,CAACK,QAAb,KAA0B,CAA9B,EAAiC;AAC/B,cAAMG,YAAY,GAAGd,KAAK,CAACP,IAAN,CAAWsB,MAAX,CAClBtB,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYH,OAAO,CAACG,EADX,CAArB;AAGAR,QAAAA,KAAK,CAACP,IAAN,GAAaqB,YAAb;AACD,OALD,MAKO;AACLR,QAAAA,YAAY,CAACK,QAAb;AACAL,QAAAA,YAAY,CAACM,UAAb,GAA0BN,YAAY,CAACM,UAAb,GAA0BN,YAAY,CAACI,KAAjE;AACD,OAZ+B,CAchC;;;AACAV,MAAAA,KAAK,CAACN,aAAN;AACD;;AA3CO;AAHqB,CAAD,CAAhC;AAkDA,OAAO,MAAMsB,aAAa,GAAGrB,YAAY,CAACsB,OAAnC;AACP,eAAetB,YAAY,CAACuB,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst defaultProduct = {\n  item: [],\n  totalQuantity: 0,\n};\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: defaultProduct,\n  reducers: {\n    replaceCartItem(state, action) {\n      const newItems = action.payload\n      state.item = newItems;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find((item) => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.item.push({\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          quantity: 1,\n          totolPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totolPrice = existingItem.totolPrice + newItem.price;\n      }\n\n      //UpdateItem in Cart\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find((item) => item.id === newItem.id);\n\n      if (existingItem.quantity === 1) {\n        const filteredItem = state.item.filter(\n          (item) => item.id !== newItem.id\n        );\n        state.item = filteredItem;\n      } else {\n        existingItem.quantity--;\n        existingItem.totolPrice = existingItem.totolPrice - existingItem.price;\n      }\n\n      //UpdateItem in Cart\n      state.totalQuantity--;\n    },\n  },\n});\n\nexport const productAction = productSlice.actions;\nexport default productSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}