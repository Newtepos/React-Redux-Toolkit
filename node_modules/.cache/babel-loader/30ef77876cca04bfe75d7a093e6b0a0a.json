{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { pageAction } from \"./pageSlice\";\nconst defaultProduct = {\n  item: [],\n  totalQuantity: 0\n};\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: defaultProduct,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.item.push({\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          quantity: 1,\n          totolPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totolPrice = existingItem.totolPrice + newItem.price;\n      } //UpdateItem in Cart\n\n\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find(item => item.id === newItem.id);\n\n      if (existingItem.quantity === 1) {\n        const filteredItem = state.item.filter(item => item.id !== newItem.id);\n        state.item = filteredItem;\n      } else {\n        existingItem.quantity--;\n        existingItem.totolPrice = existingItem.totolPrice - existingItem.price;\n      } //UpdateItem in Cart\n\n\n      state.totalQuantity--;\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    //Start Sending Data\n    dispatch(pageAction.setNotification({\n      status: \"Sending\",\n      title: \"Sending...\",\n      message: \"Data is sending...\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-efc44-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json\", {\n        method: \"put\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed\");\n      }\n    };\n\n    try {\n      await sendRequest(); //Sending Data Complete\n\n      dispatch(pageAction.setNotification({\n        status: \"success\",\n        title: \"success\",\n        message: \"Data is send successfully\"\n      })); //Reset Notification\n\n      setTimeout(() => {\n        dispatch(pageAction.resetNotification());\n      }, 1000);\n    } catch (error) {\n      dispatch(pageAction.setNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: \"Sending Data Failed\"\n      }));\n    }\n  };\n};\nexport const productAction = productSlice.actions;\nexport default productSlice.reducer;","map":{"version":3,"sources":["/Users/thipsukhon/Desktop/React Udemy/Advance-redux/src/store/productSlice.js"],"names":["createSlice","pageAction","defaultProduct","item","totalQuantity","productSlice","name","initialState","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","id","push","price","quantity","totolPrice","removeItemFromCart","filteredItem","filter","sendCartData","cart","dispatch","setNotification","status","title","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","setTimeout","resetNotification","error","productAction","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { pageAction } from \"./pageSlice\";\n\nconst defaultProduct = {\n  item: [],\n  totalQuantity: 0,\n};\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: defaultProduct,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find((item) => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.item.push({\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          quantity: 1,\n          totolPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totolPrice = existingItem.totolPrice + newItem.price;\n      }\n\n      //UpdateItem in Cart\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.item.find((item) => item.id === newItem.id);\n\n      if (existingItem.quantity === 1) {\n        const filteredItem = state.item.filter(\n          (item) => item.id !== newItem.id\n        );\n        state.item = filteredItem;\n      } else {\n        existingItem.quantity--;\n        existingItem.totolPrice = existingItem.totolPrice - existingItem.price;\n      }\n\n      //UpdateItem in Cart\n      state.totalQuantity--;\n    },\n  },\n});\n\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n\n    //Start Sending Data\n    dispatch(\n      pageAction.setNotification({\n        status: \"Sending\",\n        title: \"Sending...\",\n        message: \"Data is sending...\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://react-http-efc44-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json\",\n        { method: \"put\", body: JSON.stringify(cart) }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed\");\n      }\n    };\n\n    try {\n       await sendRequest();\n\n      //Sending Data Complete\n      dispatch(\n        pageAction.setNotification({\n          status: \"success\",\n          title: \"success\",\n          message: \"Data is send successfully\",\n        })\n      );\n\n      //Reset Notification\n      setTimeout(() => {\n        dispatch(pageAction.resetNotification());\n      }, 1000);\n    } catch (error) {\n\n      dispatch(\n        pageAction.setNotification({\n          status: \"error\",\n          title: \"Error\",\n          message: \"Sending Data Failed\",\n        })\n      );\n\n    }\n  };\n};\n\nexport const productAction = productSlice.actions;\nexport default productSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}