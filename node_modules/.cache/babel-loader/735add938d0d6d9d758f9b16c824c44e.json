{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst defaultProduct = {\n  item: [],\n  totalQuantity: 0,\n  change: false\n};\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: defaultProduct,\n  reducers: {\n    replaceCartItem(state, action) {\n      if (state.change) {\n        const newItems = action.payload ? action.payload : [];\n\n        if (newItems.length !== 0) {\n          const totalQuantity = newItems.map(items => items.quantity).reduce((prev, amount) => prev + amount);\n          state.totalQuantity = totalQuantity;\n        } else {\n          state.totalQuantity = 0;\n        }\n\n        state.item = newItems;\n      }\n    },\n\n    addItemToCart(state, action) {\n      state.change = true;\n      const newItem = action.payload;\n      const existingItem = state.item.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.item.push({\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          quantity: 1,\n          totolPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totolPrice = existingItem.totolPrice + newItem.price;\n      } //UpdateItem in Cart\n\n\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      state.change = true;\n      const newItem = action.payload;\n      const existingItem = state.item.find(item => item.id === newItem.id);\n\n      if (existingItem.quantity === 1) {\n        const filteredItem = state.item.filter(item => item.id !== newItem.id);\n        state.item = filteredItem;\n      } else {\n        existingItem.quantity--;\n        existingItem.totolPrice = existingItem.totolPrice - existingItem.price;\n      } //UpdateItem in Cart\n\n\n      state.totalQuantity--;\n    }\n\n  }\n});\nexport const productAction = productSlice.actions;\nexport default productSlice.reducer;","map":{"version":3,"sources":["/Users/thipsukhon/Desktop/React Udemy/Advance-redux/src/store/productSlice.js"],"names":["createSlice","defaultProduct","item","totalQuantity","change","productSlice","name","initialState","reducers","replaceCartItem","state","action","newItems","payload","length","map","items","quantity","reduce","prev","amount","addItemToCart","newItem","existingItem","find","id","push","price","totolPrice","removeItemFromCart","filteredItem","filter","productAction","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst defaultProduct = {\n  item: [],\n  totalQuantity: 0,\n  change: false,\n};\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: defaultProduct,\n  reducers: {\n    replaceCartItem(state, action) {\n      if (state.change) {\n        const newItems = action.payload ? action.payload : [];\n        if (newItems.length !== 0) {\n          const totalQuantity = newItems\n            .map((items) => items.quantity)\n            .reduce((prev, amount) => prev + amount);\n          state.totalQuantity = totalQuantity;\n        } else {\n          state.totalQuantity = 0;\n        }\n\n        state.item = newItems;\n      }\n    },\n\n    addItemToCart(state, action) {\n      state.change = true;\n      const newItem = action.payload;\n      const existingItem = state.item.find((item) => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.item.push({\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          quantity: 1,\n          totolPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totolPrice = existingItem.totolPrice + newItem.price;\n      }\n\n      //UpdateItem in Cart\n      state.totalQuantity++;\n    },\n\n    removeItemFromCart(state, action) {\n      state.change = true;\n      const newItem = action.payload;\n      const existingItem = state.item.find((item) => item.id === newItem.id);\n\n      if (existingItem.quantity === 1) {\n        const filteredItem = state.item.filter(\n          (item) => item.id !== newItem.id\n        );\n        state.item = filteredItem;\n      } else {\n        existingItem.quantity--;\n        existingItem.totolPrice = existingItem.totolPrice - existingItem.price;\n      }\n\n      //UpdateItem in Cart\n      state.totalQuantity--;\n    },\n  },\n});\n\nexport const productAction = productSlice.actions;\nexport default productSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}